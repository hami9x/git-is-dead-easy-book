---------------
Chap 1: Git là gì? Tại sao phải dùng?

I. Hiểu đúng

Git là một Version Control System - VCS, hay "Hệ thống quản lí phiên bản". What? Lúc trước, khi mới đọc khái niệm này tôi cứ nghĩ: "phiên bản phần mềm thì lâu lâu mới ra, có mấy phiên bản đâu mà phải "quản lí" nhỉ, nhảm thế?".
Không, hoàn toàn không phải như vậy, đó là cách hiểu theo nghĩa hẹp của từ "version", version ở đây tức là một trạng thái BẤT KÌ của một thứ nào đó, cụ thể là mã nguồn phần mềm (code), cứ mỗi khi một dòng code mới, hay thậm chí chỉ một chữ cái được thêm vào, được lưu lại thì đã được coi là có một "version" mới rồi. Và từ bây giờ, mọi khi tôi nhắc tới "version" thì bao giờ nó cũng nên được hiểu theo nghĩa này, nhớ đấy, nếu không bạn sẽ chả hiểu tôi nói gì đâu.
Một khi bạn đã hiểu đúng khái niệm "version" thì việc hiểu VCS là gì, git là gì cũng trở nên hết sức đơn giản.

Dùng git ta sẽ dễ dàng lưu trạng thái của code phần mềm ở nhiều thời điểm khác nhau, hay gọi là những "version" khác nhau, vào trong hệ thống của git. Chẳng hạn như khi fix được một bug, thêm một chức năng nhỏ, hoặc thậm chí là đang làm dở một phần nào đó, chúng ta có thể lưu vào git. Để làm gì? Tôi xin đưa ra 2 tính năng quan trọng nhất của git:

1. Cỗ máy thời gian:
Git sẽ trở thành "cỗ máy thời gian" cung cấp cho chúng ta nhiều sức mạnh tuyệt vời, mà điển hình nhất là khả năng "trở về quá khứ". Chẳng hạn như bạn thay đổi một phần nào đó của code và làm rối tung mọi thứ lên, bạn hối hận vì cách làm mới là hoàn toàn sai lầm, cần phải về như cũ! Bạn thốt lên "Chết tôi rồi, sắp tới hạn rồi mà tự dưng mình phá hỏng hết cái soft thế này!". Giải pháp duy nhất là ngồi sửa lại như cũ, nhưng nếu dùng git thì bạn đã được cứu rồi, chỉ một lệnh đơn giản là bạn có thể đưa code trở về một thời điểm trong quá khứ, và làm việc trên code đó.

Đọc đến đây có thể bạn sẽ băn khoăn "Có gì đâu, muốn quay lại quá khứ thì đơn giản là cứ backup thường xuyên, copy ra thư mục khác, khi cần thì dùng".
Nhưng, có được mấy người đủ "siêng" để có thể nhớ và thực hiện "backup" thường xuyên khi code? Việc gì phải chuốc khổ vào thân mà đi làm thủ công như vậy? Cứ dùng git luôn đi cho sướng, tuy mất chút ít thời gian làm quen với "máy móc", nhưng ai cũng biết máy móc so với làm thủ công thì như thế nào. Hơn nữa "quay lại quá khứ" chỉ là một chức năng của git thôi, git còn là...

2. Hệ thống để điều hành việc phát triển phần mềm nhóm
Tất nhiên sẽ không có nhiều vấn đề nếu bạn phát triển phần mềm một mình, và thậm chí git cũng không phải là quá cần thiết. Nhưng nếu bạn làm với người khác thì sao? Giả sử dự án của bạn đã phát triển được một phần và bạn mời một người nào đó vào dự án, làm thế nào bạn quản lí được xem người đó đã sửa những gì? Vâng, người mới vào tất nhiên không hiểu rõ code, kiến trúc, ý đồ cũng như coding convention (quy tắc code) của bạn, vì thế có thể viết ra code không tốt, không hợp và dễ gây ra bug nghiêm trọng hay thậm chí làm rối tung dự án của bạn lên. Làm thế nào để kiểm soát điều đó? Làm thế nào để biết được chính xác người kia đã thay đổi những gì?

Git, hay một VCS khác như svn, mercurial, bazaar..., là phần tất yếu và không thể thiếu của những dự án gồm nhiều người tham gia, điển hình là các dự án nguồn mở. Với một VCS, tất cả những thứ như ai đóng góp code gì, sửa những gì, lúc nào, cụ thể đã thay đổi những dòng nào... đều được VCS phân tích, lưu lại và chúng ta có thể dễ dàng quản lí mọi thứ. Nếu không có VCS, thì những rủi ro là quá cao khi mà một nước đi sai có thể làm thụt lùi cả một dự án, và chúng ta mất không ít thời gian để bù đắp lại những bước lùi đó. Và nguy hiểm hơn, một sự cố nhỏ xảy ra có thể làm mất toàn bộ hay một phần của dự án!! Một dự án lớn với nhiều người tham gia thì phức tạp gấp nhiều lần so với làm 1 soft nhỏ cá nhân cho vui, bạn nên hiểu điều đó.

II. Ai xài?
Ai dùng VCS? Vâng, hầu hết các các dự án phần mềm chuyên nghiệp. Chỉ có những dự án rất nhỏ, chỉ những lập trình viên nghiệp dư hay những công ty rất nhỏ, thiếu chuyên nghiệp mới không dùng VCS để phát triển phần mềm thôi. Dùng VCS là chuyện thường ở huyện.
Ai dùng git? Một phần không nhỏ trong lượng người dùng VCS khổng lồ đó. Git chính là một trong những VCS phổ biến nhất trên thế giới hiện nay. Github.com - trang lưu trữ, phát triển các dự án phần mềm nguồn mở dùng git - hiện gần như đã trở thành một "chuẩn" trong cộng đồng nguồn mở, các dự án lâu đời một số đã chuyển từ nơi khác sang github, còn các dự án mới phần lớn được đưa lên github... Tôi cũng sẽ không kể ra đây những dự án lớn nhất dùng git, vì đó là việc thừa thải, có quá nhiều dự án lớn dùng git và việc sử dụng git cho một dự án nguồn mở là chuyện quá ư là phổ biến. Tất nhiên các dự án nguồn đóng thì chả ai biết họ dùng VCS nào để phát triển nên không nhắc đến làm gì.

---
Chap 2: Cài đặt và cơ bản
