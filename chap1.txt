---------------
Chap 1: Git là gì? Tại sao phải dùng?

I. Hiểu đúng

Git là một Version Control System - VCS, hay "Hệ thống quản lí phiên bản". Lúc trước, khi mới đọc khái niệm này tôi cứ nghĩ: "phiên bản phần mềm thì thỉnh thoảng mới ra, có mấy phiên bản đâu mà phải "quản lí" nhỉ?".

Tôi đã nhầm, hoàn toàn không phải như vậy, đó là cách hiểu theo nghĩa hẹp của từ "version", hay phiên bản. Thực ra "phiên bản" nghĩa là một trạng thái *bất kì*, chẳng hạn, cứ mỗi khi một dòng code mới, hay thậm chí chỉ một chữ cái được thêm vào hay xóa đi, được lưu lại thì đã được coi là có một phiên bản mới rồi. Và từ bây giờ, mọi khi tôi nhắc tới "phiên bản", hay version thì bao giờ nó cũng nên được hiểu theo nghĩa này, bạn hãy ghi nhớ điều đó.

Một khi đã hiểu đúng khái niệm "phiên bản" thì việc hiểu VCS là gì, git là gì cũng trở nên hết sức đơn giản.

Dùng git, chúng ta sẽ dễ dàng lưu lại trạng thái của dự án ở nhiều thời điểm khác nhau. Chẳng hạn như khi fix được một bug, thêm một chức năng nhỏ, chỉnh sửa một chút hoặc thậm chí là đang làm dở một phần nào đó, chúng ta có thể lưu vào git. Để làm gì? Tôi xin đưa ra 2 tính năng quan trọng nhất của git:

1. Cỗ máy thời gian:

Bất cứ điều gì cũng có thể xảy ra trong quá trình chúng ta phát triển phần mềm. Chỉ cần tưởng tượng một chút, chúng ta có thể nghĩ ra hàng loạt trường hợp gây nên những sự cố trầm trọng, chẳng hạn:
- Bạn sửa một số phần trong code và kết quả là làm rối tung nó lên


Git lưu lại toàn bộ lịch sử dự án, và sẽ trở thành "cỗ máy thời gian" có thể dễ dàng đưa phần mềm của bạn về quá khứ giống như kiểu trong truyện Đô-rê-mon.



Bạn tìm cách cải thiện một hệ thống trong code của bạn. Lúc đầu tưởng đơn giản, nhưng bạn dần dần mới phát hiện ra là sự thay đổi đó gây ảnh hưởng đến rất nhiều thứ khác. Bởi vậy, bạn phải sửa rất nhiều chỗ. Nhưng không may, kết quả không thể nào tệ hơn, bạn làm rối tung mọi thứ lên. Bây giờ bạn mới chợt nhận ra: cách làm mới là hoàn toàn sai lầm!

Phải làm thế nào trong tình huống này?
Nếu như phải ngồi sửa lại như cũ thì quá cực khổ, quá khó chịu và quá mất thời gian.
Nếu là một người cẩn thận, bạn có thể đã copy code cũ ra đâu đó để dự phòng. Và nó sẽ là cứu tinh!
Nhưng không lẽ phải thường xuyên copy dự án của mình ra, gọi là "backup" để phòng khi có sự cố? Nghe cũng được đấy, nhưng không thực tế chút nào. Thứ nhất, bạn phải vượt qua rào cản là "lười". Thứ hai, việc này quá mất thời gian, quá phức tạp và rất dễ gây sai sót.

Và VCS được tạo ra

2. Hệ thống để điều hành việc phát triển phần mềm nhóm
Tất nhiên sẽ không có nhiều vấn đề nếu bạn phát triển phần mềm một mình, và thậm chí git cũng không phải là quá cần thiết. Nhưng nếu bạn làm với người khác thì sao? Giả sử dự án của bạn đã phát triển được một phần và bạn mời một người nào đó vào dự án, làm thế nào bạn quản lí được xem người đó đã sửa những gì? Vâng, người mới vào tất nhiên không hiểu rõ code, kiến trúc, ý đồ cũng như coding convention (quy tắc code) của bạn, vì thế có thể viết ra code không tốt, không hợp và dễ gây ra bug nghiêm trọng hay thậm chí làm rối tung dự án của bạn lên. Làm thế nào để kiểm soát điều đó? Làm thế nào để biết được chính xác người kia đã thay đổi những gì?

Git, hay một VCS khác như svn, mercurial, bazaar..., là phần tất yếu và không thể thiếu của những dự án gồm nhiều người tham gia, điển hình là các dự án nguồn mở. Với một VCS, tất cả những thứ như ai đóng góp code gì, sửa những gì, lúc nào, cụ thể đã thay đổi những dòng nào... đều được VCS phân tích, lưu lại và chúng ta có thể dễ dàng quản lí mọi thứ. Nếu không có VCS, thì những rủi ro là quá cao khi mà một nước đi sai có thể làm thụt lùi cả một dự án, và chúng ta mất không ít thời gian để bù đắp lại những bước lùi đó. Và nguy hiểm hơn, một sự cố nhỏ xảy ra có thể làm mất toàn bộ hay một phần của dự án!! Một dự án lớn với nhiều người tham gia thì phức tạp gấp nhiều lần so với làm 1 soft nhỏ cá nhân cho vui, bạn nên hiểu điều đó.

II. Ai dùng?
Ai dùng VCS? Vâng, hầu hết các các dự án phần mềm chuyên nghiệp. Chỉ có những dự án rất nhỏ, chỉ những lập trình viên nghiệp dư hay những công ty rất nhỏ, thiếu chuyên nghiệp mới không dùng VCS để phát triển phần mềm thôi. Dùng VCS là chuyện thường ở huyện.
Ai dùng git? Một phần không nhỏ trong lượng người dùng VCS khổng lồ đó. Git chính là một trong những VCS phổ biến nhất trên thế giới hiện nay. Github.com - trang lưu trữ, phát triển các dự án phần mềm nguồn mở dùng git - hiện gần như đã trở thành một "chuẩn" trong cộng đồng nguồn mở, các dự án lâu đời một số đã chuyển từ nơi khác sang github, còn các dự án mới phần lớn được đưa lên github... Tôi cũng sẽ không kể ra đây những dự án lớn nhất dùng git, vì đó là việc thừa thải, có quá nhiều dự án lớn dùng git và việc sử dụng git cho một dự án nguồn mở là chuyện quá ư là phổ biến. Tất nhiên các dự án nguồn đóng thì chả ai biết họ dùng VCS nào để phát triển nên không nhắc đến làm gì.